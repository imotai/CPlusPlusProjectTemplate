// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sql_parser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sql_parser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cpluscplustemplate {

namespace {

const ::google::protobuf::Descriptor* ParseSQLRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParseSQLRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParseSQLResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParseSQLResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* ParseSQLServer_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sql_5fparser_2eproto() {
  protobuf_AddDesc_sql_5fparser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sql_parser.proto");
  GOOGLE_CHECK(file != NULL);
  ParseSQLRequest_descriptor_ = file->message_type(0);
  static const int ParseSQLRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseSQLRequest, sql_),
  };
  ParseSQLRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParseSQLRequest_descriptor_,
      ParseSQLRequest::default_instance_,
      ParseSQLRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseSQLRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseSQLRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParseSQLRequest));
  ParseSQLResponse_descriptor_ = file->message_type(1);
  static const int ParseSQLResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseSQLResponse, ast_),
  };
  ParseSQLResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParseSQLResponse_descriptor_,
      ParseSQLResponse::default_instance_,
      ParseSQLResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseSQLResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParseSQLResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParseSQLResponse));
  ParseSQLServer_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sql_5fparser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParseSQLRequest_descriptor_, &ParseSQLRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParseSQLResponse_descriptor_, &ParseSQLResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sql_5fparser_2eproto() {
  delete ParseSQLRequest::default_instance_;
  delete ParseSQLRequest_reflection_;
  delete ParseSQLResponse::default_instance_;
  delete ParseSQLResponse_reflection_;
}

void protobuf_AddDesc_sql_5fparser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020sql_parser.proto\022\022cpluscplustemplate\"\036"
    "\n\017ParseSQLRequest\022\013\n\003sql\030\001 \001(\t\"\037\n\020ParseS"
    "QLResponse\022\013\n\003ast\030\001 \001(\t2g\n\016ParseSQLServe"
    "r\022U\n\010ParseSQL\022#.cpluscplustemplate.Parse"
    "SQLRequest\032$.cpluscplustemplate.ParseSQL"
    "ResponseB\003\200\001\001", 213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sql_parser.proto", &protobuf_RegisterTypes);
  ParseSQLRequest::default_instance_ = new ParseSQLRequest();
  ParseSQLResponse::default_instance_ = new ParseSQLResponse();
  ParseSQLRequest::default_instance_->InitAsDefaultInstance();
  ParseSQLResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sql_5fparser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sql_5fparser_2eproto {
  StaticDescriptorInitializer_sql_5fparser_2eproto() {
    protobuf_AddDesc_sql_5fparser_2eproto();
  }
} static_descriptor_initializer_sql_5fparser_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ParseSQLRequest::kSqlFieldNumber;
#endif  // !_MSC_VER

ParseSQLRequest::ParseSQLRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cpluscplustemplate.ParseSQLRequest)
}

void ParseSQLRequest::InitAsDefaultInstance() {
}

ParseSQLRequest::ParseSQLRequest(const ParseSQLRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cpluscplustemplate.ParseSQLRequest)
}

void ParseSQLRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParseSQLRequest::~ParseSQLRequest() {
  // @@protoc_insertion_point(destructor:cpluscplustemplate.ParseSQLRequest)
  SharedDtor();
}

void ParseSQLRequest::SharedDtor() {
  if (sql_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_;
  }
  if (this != default_instance_) {
  }
}

void ParseSQLRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParseSQLRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParseSQLRequest_descriptor_;
}

const ParseSQLRequest& ParseSQLRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sql_5fparser_2eproto();
  return *default_instance_;
}

ParseSQLRequest* ParseSQLRequest::default_instance_ = NULL;

ParseSQLRequest* ParseSQLRequest::New() const {
  return new ParseSQLRequest;
}

void ParseSQLRequest::Clear() {
  if (has_sql()) {
    if (sql_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      sql_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParseSQLRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cpluscplustemplate.ParseSQLRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sql = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql().data(), this->sql().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sql");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cpluscplustemplate.ParseSQLRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cpluscplustemplate.ParseSQLRequest)
  return false;
#undef DO_
}

void ParseSQLRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cpluscplustemplate.ParseSQLRequest)
  // optional string sql = 1;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sql(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cpluscplustemplate.ParseSQLRequest)
}

::google::protobuf::uint8* ParseSQLRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cpluscplustemplate.ParseSQLRequest)
  // optional string sql = 1;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sql(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cpluscplustemplate.ParseSQLRequest)
  return target;
}

int ParseSQLRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sql = 1;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParseSQLRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParseSQLRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParseSQLRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParseSQLRequest::MergeFrom(const ParseSQLRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sql()) {
      set_sql(from.sql());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParseSQLRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParseSQLRequest::CopyFrom(const ParseSQLRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParseSQLRequest::IsInitialized() const {

  return true;
}

void ParseSQLRequest::Swap(ParseSQLRequest* other) {
  if (other != this) {
    std::swap(sql_, other->sql_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParseSQLRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParseSQLRequest_descriptor_;
  metadata.reflection = ParseSQLRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParseSQLResponse::kAstFieldNumber;
#endif  // !_MSC_VER

ParseSQLResponse::ParseSQLResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cpluscplustemplate.ParseSQLResponse)
}

void ParseSQLResponse::InitAsDefaultInstance() {
}

ParseSQLResponse::ParseSQLResponse(const ParseSQLResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cpluscplustemplate.ParseSQLResponse)
}

void ParseSQLResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ast_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParseSQLResponse::~ParseSQLResponse() {
  // @@protoc_insertion_point(destructor:cpluscplustemplate.ParseSQLResponse)
  SharedDtor();
}

void ParseSQLResponse::SharedDtor() {
  if (ast_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ast_;
  }
  if (this != default_instance_) {
  }
}

void ParseSQLResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParseSQLResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParseSQLResponse_descriptor_;
}

const ParseSQLResponse& ParseSQLResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sql_5fparser_2eproto();
  return *default_instance_;
}

ParseSQLResponse* ParseSQLResponse::default_instance_ = NULL;

ParseSQLResponse* ParseSQLResponse::New() const {
  return new ParseSQLResponse;
}

void ParseSQLResponse::Clear() {
  if (has_ast()) {
    if (ast_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      ast_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParseSQLResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cpluscplustemplate.ParseSQLResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ast = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ast().data(), this->ast().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ast");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cpluscplustemplate.ParseSQLResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cpluscplustemplate.ParseSQLResponse)
  return false;
#undef DO_
}

void ParseSQLResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cpluscplustemplate.ParseSQLResponse)
  // optional string ast = 1;
  if (has_ast()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ast().data(), this->ast().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ast");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cpluscplustemplate.ParseSQLResponse)
}

::google::protobuf::uint8* ParseSQLResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cpluscplustemplate.ParseSQLResponse)
  // optional string ast = 1;
  if (has_ast()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ast().data(), this->ast().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ast");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cpluscplustemplate.ParseSQLResponse)
  return target;
}

int ParseSQLResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ast = 1;
    if (has_ast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ast());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParseSQLResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParseSQLResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParseSQLResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParseSQLResponse::MergeFrom(const ParseSQLResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ast()) {
      set_ast(from.ast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParseSQLResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParseSQLResponse::CopyFrom(const ParseSQLResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParseSQLResponse::IsInitialized() const {

  return true;
}

void ParseSQLResponse::Swap(ParseSQLResponse* other) {
  if (other != this) {
    std::swap(ast_, other->ast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParseSQLResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParseSQLResponse_descriptor_;
  metadata.reflection = ParseSQLResponse_reflection_;
  return metadata;
}


// ===================================================================

ParseSQLServer::~ParseSQLServer() {}

const ::google::protobuf::ServiceDescriptor* ParseSQLServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParseSQLServer_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ParseSQLServer::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParseSQLServer_descriptor_;
}

void ParseSQLServer::ParseSQL(::google::protobuf::RpcController* controller,
                         const ::cpluscplustemplate::ParseSQLRequest*,
                         ::cpluscplustemplate::ParseSQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ParseSQL() not implemented.");
  done->Run();
}

void ParseSQLServer::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ParseSQLServer_descriptor_);
  switch(method->index()) {
    case 0:
      ParseSQL(controller,
             ::google::protobuf::down_cast<const ::cpluscplustemplate::ParseSQLRequest*>(request),
             ::google::protobuf::down_cast< ::cpluscplustemplate::ParseSQLResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ParseSQLServer::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::cpluscplustemplate::ParseSQLRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ParseSQLServer::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::cpluscplustemplate::ParseSQLResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ParseSQLServer_Stub::ParseSQLServer_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ParseSQLServer_Stub::ParseSQLServer_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ParseSQLServer_Stub::~ParseSQLServer_Stub() {
  if (owns_channel_) delete channel_;
}

void ParseSQLServer_Stub::ParseSQL(::google::protobuf::RpcController* controller,
                              const ::cpluscplustemplate::ParseSQLRequest* request,
                              ::cpluscplustemplate::ParseSQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace cpluscplustemplate

// @@protoc_insertion_point(global_scope)
