// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sql_parser.proto

#ifndef PROTOBUF_sql_5fparser_2eproto__INCLUDED
#define PROTOBUF_sql_5fparser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cpluscplustemplate {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sql_5fparser_2eproto();
void protobuf_AssignDesc_sql_5fparser_2eproto();
void protobuf_ShutdownFile_sql_5fparser_2eproto();

class ParseSQLRequest;
class ParseSQLResponse;

// ===================================================================

class ParseSQLRequest : public ::google::protobuf::Message {
 public:
  ParseSQLRequest();
  virtual ~ParseSQLRequest();

  ParseSQLRequest(const ParseSQLRequest& from);

  inline ParseSQLRequest& operator=(const ParseSQLRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParseSQLRequest& default_instance();

  void Swap(ParseSQLRequest* other);

  // implements Message ----------------------------------------------

  ParseSQLRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParseSQLRequest& from);
  void MergeFrom(const ParseSQLRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sql = 1;
  inline bool has_sql() const;
  inline void clear_sql();
  static const int kSqlFieldNumber = 1;
  inline const ::std::string& sql() const;
  inline void set_sql(const ::std::string& value);
  inline void set_sql(const char* value);
  inline void set_sql(const char* value, size_t size);
  inline ::std::string* mutable_sql();
  inline ::std::string* release_sql();
  inline void set_allocated_sql(::std::string* sql);

  // @@protoc_insertion_point(class_scope:cpluscplustemplate.ParseSQLRequest)
 private:
  inline void set_has_sql();
  inline void clear_has_sql();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sql_;
  friend void  protobuf_AddDesc_sql_5fparser_2eproto();
  friend void protobuf_AssignDesc_sql_5fparser_2eproto();
  friend void protobuf_ShutdownFile_sql_5fparser_2eproto();

  void InitAsDefaultInstance();
  static ParseSQLRequest* default_instance_;
};
// -------------------------------------------------------------------

class ParseSQLResponse : public ::google::protobuf::Message {
 public:
  ParseSQLResponse();
  virtual ~ParseSQLResponse();

  ParseSQLResponse(const ParseSQLResponse& from);

  inline ParseSQLResponse& operator=(const ParseSQLResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParseSQLResponse& default_instance();

  void Swap(ParseSQLResponse* other);

  // implements Message ----------------------------------------------

  ParseSQLResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParseSQLResponse& from);
  void MergeFrom(const ParseSQLResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ast = 1;
  inline bool has_ast() const;
  inline void clear_ast();
  static const int kAstFieldNumber = 1;
  inline const ::std::string& ast() const;
  inline void set_ast(const ::std::string& value);
  inline void set_ast(const char* value);
  inline void set_ast(const char* value, size_t size);
  inline ::std::string* mutable_ast();
  inline ::std::string* release_ast();
  inline void set_allocated_ast(::std::string* ast);

  // @@protoc_insertion_point(class_scope:cpluscplustemplate.ParseSQLResponse)
 private:
  inline void set_has_ast();
  inline void clear_has_ast();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ast_;
  friend void  protobuf_AddDesc_sql_5fparser_2eproto();
  friend void protobuf_AssignDesc_sql_5fparser_2eproto();
  friend void protobuf_ShutdownFile_sql_5fparser_2eproto();

  void InitAsDefaultInstance();
  static ParseSQLResponse* default_instance_;
};
// ===================================================================

class ParseSQLServer_Stub;

class ParseSQLServer : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ParseSQLServer() {};
 public:
  virtual ~ParseSQLServer();

  typedef ParseSQLServer_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void ParseSQL(::google::protobuf::RpcController* controller,
                       const ::cpluscplustemplate::ParseSQLRequest* request,
                       ::cpluscplustemplate::ParseSQLResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ParseSQLServer);
};

class ParseSQLServer_Stub : public ParseSQLServer {
 public:
  ParseSQLServer_Stub(::google::protobuf::RpcChannel* channel);
  ParseSQLServer_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ParseSQLServer_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ParseSQLServer ------------------------------------------

  void ParseSQL(::google::protobuf::RpcController* controller,
                       const ::cpluscplustemplate::ParseSQLRequest* request,
                       ::cpluscplustemplate::ParseSQLResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ParseSQLServer_Stub);
};


// ===================================================================


// ===================================================================

// ParseSQLRequest

// optional string sql = 1;
inline bool ParseSQLRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParseSQLRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParseSQLRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParseSQLRequest::clear_sql() {
  if (sql_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_->clear();
  }
  clear_has_sql();
}
inline const ::std::string& ParseSQLRequest::sql() const {
  // @@protoc_insertion_point(field_get:cpluscplustemplate.ParseSQLRequest.sql)
  return *sql_;
}
inline void ParseSQLRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
  // @@protoc_insertion_point(field_set:cpluscplustemplate.ParseSQLRequest.sql)
}
inline void ParseSQLRequest::set_sql(const char* value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
  // @@protoc_insertion_point(field_set_char:cpluscplustemplate.ParseSQLRequest.sql)
}
inline void ParseSQLRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_ = new ::std::string;
  }
  sql_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cpluscplustemplate.ParseSQLRequest.sql)
}
inline ::std::string* ParseSQLRequest::mutable_sql() {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sql_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cpluscplustemplate.ParseSQLRequest.sql)
  return sql_;
}
inline ::std::string* ParseSQLRequest::release_sql() {
  clear_has_sql();
  if (sql_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sql_;
    sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParseSQLRequest::set_allocated_sql(::std::string* sql) {
  if (sql_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sql_;
  }
  if (sql) {
    set_has_sql();
    sql_ = sql;
  } else {
    clear_has_sql();
    sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cpluscplustemplate.ParseSQLRequest.sql)
}

// -------------------------------------------------------------------

// ParseSQLResponse

// optional string ast = 1;
inline bool ParseSQLResponse::has_ast() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParseSQLResponse::set_has_ast() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParseSQLResponse::clear_has_ast() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParseSQLResponse::clear_ast() {
  if (ast_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ast_->clear();
  }
  clear_has_ast();
}
inline const ::std::string& ParseSQLResponse::ast() const {
  // @@protoc_insertion_point(field_get:cpluscplustemplate.ParseSQLResponse.ast)
  return *ast_;
}
inline void ParseSQLResponse::set_ast(const ::std::string& value) {
  set_has_ast();
  if (ast_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ast_ = new ::std::string;
  }
  ast_->assign(value);
  // @@protoc_insertion_point(field_set:cpluscplustemplate.ParseSQLResponse.ast)
}
inline void ParseSQLResponse::set_ast(const char* value) {
  set_has_ast();
  if (ast_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ast_ = new ::std::string;
  }
  ast_->assign(value);
  // @@protoc_insertion_point(field_set_char:cpluscplustemplate.ParseSQLResponse.ast)
}
inline void ParseSQLResponse::set_ast(const char* value, size_t size) {
  set_has_ast();
  if (ast_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ast_ = new ::std::string;
  }
  ast_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cpluscplustemplate.ParseSQLResponse.ast)
}
inline ::std::string* ParseSQLResponse::mutable_ast() {
  set_has_ast();
  if (ast_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ast_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cpluscplustemplate.ParseSQLResponse.ast)
  return ast_;
}
inline ::std::string* ParseSQLResponse::release_ast() {
  clear_has_ast();
  if (ast_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ast_;
    ast_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParseSQLResponse::set_allocated_ast(::std::string* ast) {
  if (ast_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ast_;
  }
  if (ast) {
    set_has_ast();
    ast_ = ast;
  } else {
    clear_has_ast();
    ast_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cpluscplustemplate.ParseSQLResponse.ast)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cpluscplustemplate

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sql_5fparser_2eproto__INCLUDED
