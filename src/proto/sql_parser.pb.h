// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sql_parser.proto

#ifndef PROTOBUF_INCLUDED_sql_5fparser_2eproto
#define PROTOBUF_INCLUDED_sql_5fparser_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sql_5fparser_2eproto 

namespace protobuf_sql_5fparser_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sql_5fparser_2eproto
namespace cpluscplustemplate {
class ParseSQLRequest;
class ParseSQLRequestDefaultTypeInternal;
extern ParseSQLRequestDefaultTypeInternal _ParseSQLRequest_default_instance_;
class ParseSQLResponse;
class ParseSQLResponseDefaultTypeInternal;
extern ParseSQLResponseDefaultTypeInternal _ParseSQLResponse_default_instance_;
}  // namespace cpluscplustemplate
namespace google {
namespace protobuf {
template<> ::cpluscplustemplate::ParseSQLRequest* Arena::CreateMaybeMessage<::cpluscplustemplate::ParseSQLRequest>(Arena*);
template<> ::cpluscplustemplate::ParseSQLResponse* Arena::CreateMaybeMessage<::cpluscplustemplate::ParseSQLResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cpluscplustemplate {

// ===================================================================

class ParseSQLRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cpluscplustemplate.ParseSQLRequest) */ {
 public:
  ParseSQLRequest();
  virtual ~ParseSQLRequest();

  ParseSQLRequest(const ParseSQLRequest& from);

  inline ParseSQLRequest& operator=(const ParseSQLRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParseSQLRequest(ParseSQLRequest&& from) noexcept
    : ParseSQLRequest() {
    *this = ::std::move(from);
  }

  inline ParseSQLRequest& operator=(ParseSQLRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParseSQLRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParseSQLRequest* internal_default_instance() {
    return reinterpret_cast<const ParseSQLRequest*>(
               &_ParseSQLRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ParseSQLRequest* other);
  friend void swap(ParseSQLRequest& a, ParseSQLRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParseSQLRequest* New() const final {
    return CreateMaybeMessage<ParseSQLRequest>(NULL);
  }

  ParseSQLRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParseSQLRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParseSQLRequest& from);
  void MergeFrom(const ParseSQLRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParseSQLRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sql = 1;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // @@protoc_insertion_point(class_scope:cpluscplustemplate.ParseSQLRequest)
 private:
  void set_has_sql();
  void clear_has_sql();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  friend struct ::protobuf_sql_5fparser_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParseSQLResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cpluscplustemplate.ParseSQLResponse) */ {
 public:
  ParseSQLResponse();
  virtual ~ParseSQLResponse();

  ParseSQLResponse(const ParseSQLResponse& from);

  inline ParseSQLResponse& operator=(const ParseSQLResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParseSQLResponse(ParseSQLResponse&& from) noexcept
    : ParseSQLResponse() {
    *this = ::std::move(from);
  }

  inline ParseSQLResponse& operator=(ParseSQLResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParseSQLResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParseSQLResponse* internal_default_instance() {
    return reinterpret_cast<const ParseSQLResponse*>(
               &_ParseSQLResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ParseSQLResponse* other);
  friend void swap(ParseSQLResponse& a, ParseSQLResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParseSQLResponse* New() const final {
    return CreateMaybeMessage<ParseSQLResponse>(NULL);
  }

  ParseSQLResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParseSQLResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParseSQLResponse& from);
  void MergeFrom(const ParseSQLResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParseSQLResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ast = 1;
  bool has_ast() const;
  void clear_ast();
  static const int kAstFieldNumber = 1;
  const ::std::string& ast() const;
  void set_ast(const ::std::string& value);
  #if LANG_CXX11
  void set_ast(::std::string&& value);
  #endif
  void set_ast(const char* value);
  void set_ast(const char* value, size_t size);
  ::std::string* mutable_ast();
  ::std::string* release_ast();
  void set_allocated_ast(::std::string* ast);

  // @@protoc_insertion_point(class_scope:cpluscplustemplate.ParseSQLResponse)
 private:
  void set_has_ast();
  void clear_has_ast();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ast_;
  friend struct ::protobuf_sql_5fparser_2eproto::TableStruct;
};
// ===================================================================

class ParseSQLServer_Stub;

class ParseSQLServer : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ParseSQLServer() {};
 public:
  virtual ~ParseSQLServer();

  typedef ParseSQLServer_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void ParseSQL(::google::protobuf::RpcController* controller,
                       const ::cpluscplustemplate::ParseSQLRequest* request,
                       ::cpluscplustemplate::ParseSQLResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ParseSQLServer);
};

class ParseSQLServer_Stub : public ParseSQLServer {
 public:
  ParseSQLServer_Stub(::google::protobuf::RpcChannel* channel);
  ParseSQLServer_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ParseSQLServer_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ParseSQLServer ------------------------------------------

  void ParseSQL(::google::protobuf::RpcController* controller,
                       const ::cpluscplustemplate::ParseSQLRequest* request,
                       ::cpluscplustemplate::ParseSQLResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ParseSQLServer_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParseSQLRequest

// optional string sql = 1;
inline bool ParseSQLRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParseSQLRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParseSQLRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParseSQLRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& ParseSQLRequest::sql() const {
  // @@protoc_insertion_point(field_get:cpluscplustemplate.ParseSQLRequest.sql)
  return sql_.GetNoArena();
}
inline void ParseSQLRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cpluscplustemplate.ParseSQLRequest.sql)
}
#if LANG_CXX11
inline void ParseSQLRequest::set_sql(::std::string&& value) {
  set_has_sql();
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cpluscplustemplate.ParseSQLRequest.sql)
}
#endif
inline void ParseSQLRequest::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cpluscplustemplate.ParseSQLRequest.sql)
}
inline void ParseSQLRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cpluscplustemplate.ParseSQLRequest.sql)
}
inline ::std::string* ParseSQLRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:cpluscplustemplate.ParseSQLRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParseSQLRequest::release_sql() {
  // @@protoc_insertion_point(field_release:cpluscplustemplate.ParseSQLRequest.sql)
  if (!has_sql()) {
    return NULL;
  }
  clear_has_sql();
  return sql_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParseSQLRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:cpluscplustemplate.ParseSQLRequest.sql)
}

// -------------------------------------------------------------------

// ParseSQLResponse

// optional string ast = 1;
inline bool ParseSQLResponse::has_ast() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParseSQLResponse::set_has_ast() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParseSQLResponse::clear_has_ast() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParseSQLResponse::clear_ast() {
  ast_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ast();
}
inline const ::std::string& ParseSQLResponse::ast() const {
  // @@protoc_insertion_point(field_get:cpluscplustemplate.ParseSQLResponse.ast)
  return ast_.GetNoArena();
}
inline void ParseSQLResponse::set_ast(const ::std::string& value) {
  set_has_ast();
  ast_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cpluscplustemplate.ParseSQLResponse.ast)
}
#if LANG_CXX11
inline void ParseSQLResponse::set_ast(::std::string&& value) {
  set_has_ast();
  ast_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cpluscplustemplate.ParseSQLResponse.ast)
}
#endif
inline void ParseSQLResponse::set_ast(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ast();
  ast_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cpluscplustemplate.ParseSQLResponse.ast)
}
inline void ParseSQLResponse::set_ast(const char* value, size_t size) {
  set_has_ast();
  ast_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cpluscplustemplate.ParseSQLResponse.ast)
}
inline ::std::string* ParseSQLResponse::mutable_ast() {
  set_has_ast();
  // @@protoc_insertion_point(field_mutable:cpluscplustemplate.ParseSQLResponse.ast)
  return ast_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParseSQLResponse::release_ast() {
  // @@protoc_insertion_point(field_release:cpluscplustemplate.ParseSQLResponse.ast)
  if (!has_ast()) {
    return NULL;
  }
  clear_has_ast();
  return ast_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParseSQLResponse::set_allocated_ast(::std::string* ast) {
  if (ast != NULL) {
    set_has_ast();
  } else {
    clear_has_ast();
  }
  ast_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ast);
  // @@protoc_insertion_point(field_set_allocated:cpluscplustemplate.ParseSQLResponse.ast)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cpluscplustemplate

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sql_5fparser_2eproto
